/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.store.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * ApplicationKeyGenerateRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-22T05:38:36.290Z")
public class ApplicationKeyGenerateRequest {
    @SerializedName("keyType")
    private KeyTypeEnum keyType = null;
    @SerializedName("grantTypesToBeSupported")
    private List<String> grantTypesToBeSupported = new ArrayList<String>();
    @SerializedName("callbackUrl")
    private String callbackUrl = null;

    public ApplicationKeyGenerateRequest keyType(KeyTypeEnum keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get keyType
     *
     * @return keyType
     **/
    @ApiModelProperty(required = true, value = "")
    public KeyTypeEnum getKeyType() {
        return keyType;
    }

    public void setKeyType(KeyTypeEnum keyType) {
        this.keyType = keyType;
    }

    public ApplicationKeyGenerateRequest grantTypesToBeSupported(List<String> grantTypesToBeSupported) {
        this.grantTypesToBeSupported = grantTypesToBeSupported;
        return this;
    }

    public ApplicationKeyGenerateRequest addGrantTypesToBeSupportedItem(String grantTypesToBeSupportedItem) {
        this.grantTypesToBeSupported.add(grantTypesToBeSupportedItem);
        return this;
    }

    /**
     * Grant types that should be supported by the application
     *
     * @return grantTypesToBeSupported
     **/
    @ApiModelProperty(required = true, value = "Grant types that should be supported by the application")
    public List<String> getGrantTypesToBeSupported() {
        return grantTypesToBeSupported;
    }

    public void setGrantTypesToBeSupported(List<String> grantTypesToBeSupported) {
        this.grantTypesToBeSupported = grantTypesToBeSupported;
    }

    public ApplicationKeyGenerateRequest callbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }

    /**
     * Callback URL
     *
     * @return callbackUrl
     **/
    @ApiModelProperty(value = "Callback URL")
    public String getCallbackUrl() {
        return callbackUrl;
    }

    public void setCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationKeyGenerateRequest applicationKeyGenerateRequest = (ApplicationKeyGenerateRequest) o;
        return Objects.equals(this.keyType, applicationKeyGenerateRequest.keyType) &&
                Objects.equals(this.grantTypesToBeSupported, applicationKeyGenerateRequest.grantTypesToBeSupported) &&
                Objects.equals(this.callbackUrl, applicationKeyGenerateRequest.callbackUrl);
    }

    @Override
    public int hashCode() {
        return Objects.hash(keyType, grantTypesToBeSupported, callbackUrl);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApplicationKeyGenerateRequest {\n");

        sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
        sb.append("    grantTypesToBeSupported: ").append(toIndentedString(grantTypesToBeSupported)).append("\n");
        sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets keyType
     */
    @JsonAdapter(KeyTypeEnum.Adapter.class)
    public enum KeyTypeEnum {
        PRODUCTION("PRODUCTION"),

        SANDBOX("SANDBOX");

        private String value;

        KeyTypeEnum(String value) {
            this.value = value;
        }

        public static KeyTypeEnum fromValue(String text) {
            for (KeyTypeEnum b : KeyTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<KeyTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final KeyTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public KeyTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return KeyTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

