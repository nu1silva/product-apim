/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.store.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.Objects;

/**
 * ApplicationKeyMappingRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-08-22T05:38:36.290Z")
public class ApplicationKeyMappingRequest {
    @SerializedName("consumerKey")
    private String consumerKey = null;

    @SerializedName("consumerSecret")
    private String consumerSecret = null;
    @SerializedName("keyType")
    private KeyTypeEnum keyType = null;

    public ApplicationKeyMappingRequest consumerKey(String consumerKey) {
        this.consumerKey = consumerKey;
        return this;
    }

    /**
     * Consumer key of the application
     *
     * @return consumerKey
     **/
    @ApiModelProperty(required = true, value = "Consumer key of the application")
    public String getConsumerKey() {
        return consumerKey;
    }

    public void setConsumerKey(String consumerKey) {
        this.consumerKey = consumerKey;
    }

    public ApplicationKeyMappingRequest consumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
        return this;
    }

    /**
     * Consumer secret of the application
     *
     * @return consumerSecret
     **/
    @ApiModelProperty(required = true, value = "Consumer secret of the application")
    public String getConsumerSecret() {
        return consumerSecret;
    }

    public void setConsumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
    }

    public ApplicationKeyMappingRequest keyType(KeyTypeEnum keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get keyType
     *
     * @return keyType
     **/
    @ApiModelProperty(value = "")
    public KeyTypeEnum getKeyType() {
        return keyType;
    }

    public void setKeyType(KeyTypeEnum keyType) {
        this.keyType = keyType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicationKeyMappingRequest applicationKeyMappingRequest = (ApplicationKeyMappingRequest) o;
        return Objects.equals(this.consumerKey, applicationKeyMappingRequest.consumerKey) &&
                Objects.equals(this.consumerSecret, applicationKeyMappingRequest.consumerSecret) &&
                Objects.equals(this.keyType, applicationKeyMappingRequest.keyType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(consumerKey, consumerSecret, keyType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ApplicationKeyMappingRequest {\n");

        sb.append("    consumerKey: ").append(toIndentedString(consumerKey)).append("\n");
        sb.append("    consumerSecret: ").append(toIndentedString(consumerSecret)).append("\n");
        sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Gets or Sets keyType
     */
    @JsonAdapter(KeyTypeEnum.Adapter.class)
    public enum KeyTypeEnum {
        PRODUCTION("PRODUCTION"),

        SANDBOX("SANDBOX");

        private String value;

        KeyTypeEnum(String value) {
            this.value = value;
        }

        public static KeyTypeEnum fromValue(String text) {
            for (KeyTypeEnum b : KeyTypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<KeyTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final KeyTypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public KeyTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return KeyTypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

}

