/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.store.api;

import org.testng.annotations.Test;
import org.wso2.carbon.apimgt.rest.integration.tests.store.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.API;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.APIList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.Application;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.CommentList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.Subscription;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.SubscriptionList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.TagList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.Tier;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.TierList;

import java.util.List;

/**
 * API tests for RetrieveApi
 */
public class RetrieveApiTest {

    private final RetrieveApi api = new RetrieveApi();


    /**
     * Get a list of Comments that are already added to APIs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdCommentsGetTest() throws ApiException {
        String apiId = null;
        Integer limit = null;
        Integer offset = null;
        CommentList response = api.apisApiIdCommentsGet(apiId, limit, offset);

        // TODO: test validations
    }

    /**
     * Get details of an API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        API response = api.apisApiIdGet(apiId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Get the swagger of an API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisApiIdSwaggerGetTest() throws ApiException {
        String apiId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        api.apisApiIdSwaggerGet(apiId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Retrieving APIs
     * <p>
     * Get a list of available APIs qualifying under a given search condition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apisGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String query = null;
        String ifNoneMatch = null;
        APIList response = api.apisGet(limit, offset, query, ifNoneMatch);

        // TODO: test validations
    }

    /**
     * Get application details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdGetTest() throws ApiException {
        String applicationId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Application response = api.applicationsApplicationIdGet(applicationId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Get a list of applications
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsGetTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Integer offset = null;
        String ifNoneMatch = null;
        ApplicationList response = api.applicationsGet(query, limit, offset, ifNoneMatch);

        // TODO: test validations
    }

    /**
     * Get available policies
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policiesTierLevelGetTest() throws ApiException {
        String tierLevel = null;
        Integer limit = null;
        Integer offset = null;
        String ifNoneMatch = null;
        List<TierList> response = api.policiesTierLevelGet(tierLevel, limit, offset, ifNoneMatch);

        // TODO: test validations
    }

    /**
     * Get policy details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policiesTierLevelTierNameGetTest() throws ApiException {
        String tierName = null;
        String tierLevel = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Tier response = api.policiesTierLevelTierNameGet(tierName, tierLevel, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Get subscription list. The API Identifier or Application Identifier the subscriptions of which are to be returned are passed as parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsGetTest() throws ApiException {
        String apiId = null;
        String applicationId = null;
        String apiType = null;
        Integer offset = null;
        Integer limit = null;
        String ifNoneMatch = null;
        SubscriptionList response = api.subscriptionsGet(apiId, applicationId, apiType, offset, limit, ifNoneMatch);

        // TODO: test validations
    }

    /**
     * Get subscription details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsSubscriptionIdGetTest() throws ApiException {
        String subscriptionId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Subscription response = api.subscriptionsSubscriptionIdGet(subscriptionId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Get a list of tags that are already added to APIs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagsGetTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        String ifNoneMatch = null;
        TagList response = api.tagsGet(limit, offset, ifNoneMatch);

        // TODO: test validations
    }

}
