/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * OpenAPI spec version: v1.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wso2.carbon.apimgt.rest.integration.tests.store.api;

import org.testng.annotations.Test;
import org.wso2.carbon.apimgt.rest.integration.tests.store.ApiException;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.Application;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationKeyGenerateRequest;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationKeyMappingRequest;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationKeys;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationKeysList;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationToken;
import org.wso2.carbon.apimgt.rest.integration.tests.store.model.ApplicationTokenGenerateRequest;

/**
 * API tests for ApplicationIndividualApi
 */
public class ApplicationIndividualApiTest {

    private final ApplicationIndividualApi api = new ApplicationIndividualApi();


    /**
     * Remove an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdDeleteTest() throws ApiException {
        String applicationId = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        api.applicationsApplicationIdDelete(applicationId, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }

    /**
     * Generate keys (Consumer key/secret) for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdGenerateKeysPostTest() throws ApiException {
        String applicationId = null;
        ApplicationKeyGenerateRequest body = null;
        ApplicationKeys response = api.applicationsApplicationIdGenerateKeysPost(applicationId, body);

        // TODO: test validations
    }

    /**
     * Generate an access token for application by client_credentials grant type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdGenerateTokenPostTest() throws ApiException {
        String applicationId = null;
        ApplicationTokenGenerateRequest body = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        ApplicationToken response = api.applicationsApplicationIdGenerateTokenPost(applicationId, body, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }

    /**
     * Get application details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdGetTest() throws ApiException {
        String applicationId = null;
        String ifNoneMatch = null;
        String ifModifiedSince = null;
        Application response = api.applicationsApplicationIdGet(applicationId, ifNoneMatch, ifModifiedSince);

        // TODO: test validations
    }

    /**
     * Retrieve keys (Consumer key/secret) of application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdKeysGetTest() throws ApiException {
        String applicationId = null;
        ApplicationKeysList response = api.applicationsApplicationIdKeysGet(applicationId);

        // TODO: test validations
    }

    /**
     * Retrieve keys (Consumer key/secret) of application by a given type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdKeysKeyTypeGetTest() throws ApiException {
        String applicationId = null;
        String keyType = null;
        ApplicationKeys response = api.applicationsApplicationIdKeysKeyTypeGet(applicationId, keyType);

        // TODO: test validations
    }

    /**
     * Update grant types and callback url (Consumer Key and Consumer Secret are ignored)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdKeysKeyTypePutTest() throws ApiException {
        String applicationId = null;
        String keyType = null;
        ApplicationKeys body = null;
        ApplicationKeys response = api.applicationsApplicationIdKeysKeyTypePut(applicationId, keyType, body);

        // TODO: test validations
    }

    /**
     * Map keys (Consumer key/secret) to an application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdMapKeysPostTest() throws ApiException {
        String applicationId = null;
        ApplicationKeyMappingRequest body = null;
        ApplicationKeys response = api.applicationsApplicationIdMapKeysPost(applicationId, body);

        // TODO: test validations
    }

    /**
     * Update application details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsApplicationIdPutTest() throws ApiException {
        String applicationId = null;
        Application body = null;
        String ifMatch = null;
        String ifUnmodifiedSince = null;
        Application response = api.applicationsApplicationIdPut(applicationId, body, ifMatch, ifUnmodifiedSince);

        // TODO: test validations
    }

    /**
     * Create a new application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applicationsPostTest() throws ApiException {
        Application body = null;
        Application response = api.applicationsPost(body);

        // TODO: test validations
    }

}
